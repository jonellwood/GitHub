"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.textInputStyle = void 0;
var focusRing_1 = require("../focusRing");
var helpers_1 = require("../helpers");
exports.textInputStyle = {
    root: function () { return [rootStyle]; },
    input: function () { return [inputBaseStyle, inputFontSizeStyle]; },
    representation: [representationStyle],
};
function rootStyle() {
    return {
        '&:not([hidden])': {
            display: 'flex',
        },
    };
}
function inputBaseStyle(props) {
    var theme = props.theme, $weight = props.$weight;
    var font = theme.sanity.fonts.text;
    var color = theme.sanity.color.input;
    return {
        appearance: 'none',
        background: 'none',
        border: 0,
        borderRadius: 0,
        outline: 'none',
        width: '100%',
        boxSizing: 'border-box',
        fontFamily: font.family,
        fontWeight: ($weight && font.weights[$weight]) || font.weights.regular,
        margin: 0,
        position: 'relative',
        zIndex: 1,
        display: 'block',
        // &:is(textarea)
        '&[data-as="textarea"]': {
            resize: 'none',
        },
        // enabled
        '&:not(:invalid):not(:disabled)': {
            color: color.default.enabled.fg,
            '&::placeholder': {
                color: color.default.enabled.placeholder,
            },
        },
        // disabled
        '&:not(:invalid):disabled': {
            color: color.default.disabled.fg,
            '&::placeholder': {
                color: color.default.disabled.placeholder,
            },
        },
        // invalid
        '&:invalid': {
            color: color.invalid.enabled.fg,
            '&::placeholder': {
                color: color.invalid.enabled.placeholder,
            },
        },
    };
}
function inputFontSizeStyle(props) {
    var theme = props.theme;
    var _a = theme.sanity, fonts = _a.fonts, media = _a.media;
    return helpers_1.responsive(media, helpers_1.getResponsiveProp(props.$fontSize, [2]), function (sizeIndex) {
        var size = fonts.text.sizes[sizeIndex] || fonts.text.sizes[2];
        return {
            fontSize: helpers_1.rem(size.fontSize),
            lineHeight: size.lineHeight / size.fontSize,
        };
    });
}
function representationStyle(props) {
    var $border = props.$border, $hasPrefix = props.$hasPrefix, $hasSuffix = props.$hasSuffix, theme = props.theme;
    var _a = theme.sanity, focusRing = _a.focusRing, input = _a.input;
    var color = theme.sanity.color.input;
    return {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        display: 'block',
        pointerEvents: 'none',
        zIndex: 0,
        // enabled
        '*:not(:disabled) + &': {
            '--card-bg-color': color.default.enabled.bg,
            '--card-fg-color': color.default.enabled.fg,
            backgroundColor: color.default.enabled.bg,
            boxShadow: $border
                ? focusRing_1.focusRingBorderStyle({ color: color.default.enabled.border, width: input.border.width })
                : undefined,
        },
        // invalid
        '*:not(:disabled):invalid + &': {
            '--card-bg-color': color.invalid.enabled.bg,
            '--card-fg-color': color.invalid.enabled.fg,
            backgroundColor: color.invalid.enabled.bg,
            boxShadow: $border
                ? focusRing_1.focusRingBorderStyle({ color: color.invalid.enabled.border, width: input.border.width })
                : 'none',
        },
        // focused
        '*:not(:disabled):not(:read-only):focus + &': {
            boxShadow: focusRing_1.focusRingStyle({
                border: $border
                    ? { color: color.default.enabled.border, width: input.border.width }
                    : undefined,
                focusRing: focusRing,
            }),
        },
        // disabled
        '*:disabled + &': {
            '--card-bg-color': color.default.disabled.bg,
            '--card-fg-color': color.default.disabled.fg,
            backgroundColor: color.default.disabled.bg,
            boxShadow: $border
                ? focusRing_1.focusRingBorderStyle({
                    color: color.default.disabled.border,
                    width: input.border.width,
                })
                : 'none',
        },
        // hovered
        '@media (hover: hover)': {
            '*:not(:disabled):not(:read-only):not(:invalid):hover + &': {
                '--card-bg-color': color.default.hovered.bg,
                '--card-fg-color': color.default.hovered.fg,
                backgroundColor: color.default.hovered.bg,
            },
            '*:not(:disabled):not(:read-only):not(:invalid):not(:focus):hover + &': {
                boxShadow: $border
                    ? focusRing_1.focusRingBorderStyle({
                        color: color.default.hovered.border,
                        width: input.border.width,
                    })
                    : 'none',
            },
        },
        borderTopLeftRadius: $hasPrefix ? 0 : undefined,
        borderBottomLeftRadius: $hasPrefix ? 0 : undefined,
        borderTopRightRadius: $hasSuffix ? 0 : undefined,
        borderBottomRightRadius: $hasSuffix ? 0 : undefined,
    };
}
//# sourceMappingURL=textInputStyle.js.map