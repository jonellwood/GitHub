var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { CloseIcon } from '@sanity/icons';
import React, { createElement, forwardRef, isValidElement, useCallback } from 'react';
import { isValidElementType } from 'react-is';
import styled from 'styled-components';
import { useForwardedRef, useCustomValidity } from '../../hooks';
import { getResponsiveProp } from '../../styles';
import { responsiveRadiusStyle, responsiveInputPaddingStyle, textInputStyle, } from '../../styles/internal';
import { Box } from '../box';
import { Button } from '../button';
import { Card } from '../card';
import { Text } from '../text';
const Root = styled.span(textInputStyle.root);
const InputRoot = styled.span `
  flex: 1;
  min-width: 0;
  display: block;
  position: relative;
`;
const Prefix = styled(Card).attrs({ forwardedAs: 'span' }) `
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;

  & > span {
    display: block;
    margin: -1px;
  }
`;
const Suffix = styled(Card).attrs({ forwardedAs: 'span' }) `
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;

  & > span {
    display: block;
    margin: -1px;
  }
`;
const Input = styled.input(responsiveInputPaddingStyle, textInputStyle.input);
const Presentation = styled.span(responsiveRadiusStyle, textInputStyle.representation);
const LeftBox = styled(Box) `
  position: absolute;
  top: 0;
  left: 0;
`;
const RightBox = styled(Box) `
  position: absolute;
  top: 0;
  right: 0;
`;
export const TextInput = forwardRef((props, forwardedRef) => {
    const { border = true, clearButton, disabled = false, fontSize = 2, icon, iconRight, onClear, padding: paddingProp = 3, prefix, radius = 1, space = 3, suffix, customValidity, type = 'text' } = props, restProps = __rest(props, ["border", "clearButton", "disabled", "fontSize", "icon", "iconRight", "onClear", "padding", "prefix", "radius", "space", "suffix", "customValidity", "type"]);
    const ref = useForwardedRef(forwardedRef);
    const padding = getResponsiveProp(paddingProp);
    useCustomValidity(ref, customValidity);
    // Prevent the clear button from taking the focus away from the input
    const handleClearMouseDown = useCallback((event) => {
        event.preventDefault();
        event.stopPropagation();
    }, []);
    const handleClearClick = useCallback((event) => {
        var _a;
        event.preventDefault();
        event.stopPropagation();
        if (onClear)
            onClear();
        // Focus the input, in case focus has been lost when clicking the clear button
        (_a = ref.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, [onClear, ref]);
    return (React.createElement(Root, { "data-ui": "TextInput" },
        prefix && (React.createElement(Prefix, { borderTop: true, borderLeft: true, borderBottom: true, radius: radius, sizing: "border" },
            React.createElement("span", null, prefix))),
        React.createElement(InputRoot, null,
            React.createElement(Input, Object.assign({ "data-as": "input" }, restProps, { "$iconLeft": Boolean(icon), "$iconRight": Boolean(iconRight) || Boolean(clearButton), "$padding": padding, "$space": space, "$fontSize": fontSize, disabled: disabled, ref: ref, type: type })),
            React.createElement(Presentation, { "$border": border, "$hasPrefix": Boolean(prefix), "$hasSuffix": Boolean(suffix), "$radius": radius },
                icon && (React.createElement(LeftBox, { padding: padding },
                    React.createElement(Text, { size: fontSize },
                        isValidElement(icon) && icon,
                        isValidElementType(icon) && createElement(icon)))),
                !clearButton && iconRight && (React.createElement(RightBox, { padding: padding },
                    React.createElement(Text, { size: fontSize },
                        isValidElement(iconRight) && iconRight,
                        isValidElementType(iconRight) && createElement(iconRight))))),
            clearButton && (React.createElement(RightBox, { padding: padding.map((v) => v - 2), style: { zIndex: 2 } },
                React.createElement(Button, Object.assign({}, (typeof clearButton === 'object' ? clearButton : {}), { "data-qa": "clear-button", fontSize: fontSize, icon: CloseIcon, mode: "bleed", onClick: handleClearClick, onMouseDown: handleClearMouseDown, padding: padding.map((v) => v - 1) }))))),
        suffix && (React.createElement(Suffix, { borderTop: true, borderRight: true, borderBottom: true, radius: radius, sizing: "border" },
            React.createElement("span", null, suffix)))));
});
TextInput.displayName = 'TextInput';
//# sourceMappingURL=textInput.js.map